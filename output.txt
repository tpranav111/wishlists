Running tests...
============================= test session starts ==============================
platform linux -- Python 3.11.10, pytest-8.3.3, pluggy-1.5.0
rootdir: /app
configfile: pyproject.toml
testpaths: tests
plugins: pspec-0.0.4, Faker-33.0.0, cov-5.0.0
collected 55 items

tests/test_cli_commands.py                                                                                 
Flask CLI Command Tests
[92m âœ“ It should call the db-create command[0m
[92m âœ“ It should call the db-drop command[0m
                                                                         [  0%]
tests/test_items.py                                                                                 
Items Model Test Cases
[92m âœ“ It should create a new Item in the Wishlist[0m
[91m âœ— It should Delete an item from a Wishlist[0m
[92m âœ“ It should not Deserialize an item with a KeyError[0m
[92m âœ“ It should not Deserialize an item with a TypeError[0m
[91m âœ— It should find Items by Category[0m
[91m âœ— It should Find Items by is favorite[0m
[91m âœ— It should find Items by Price[0m
[91m âœ— It should Read a Item[0m
[92m âœ“ It should Update a Wishlist Item[0m
[92m âœ“ It should fail to Update a Wishlist Item with invalid quantity type[0m
                                                                         [  0%]
tests/test_routes.py                                                                                 
REST API Server Tests
[91m âœ— It should cancel an item as favorite[0m
[92m âœ“ It should cancel an wishlist as favorite[0m
[91m âœ— It should Add an item to an wishlist[0m
[92m âœ“ It should return 404 when the Wishlist is not found[0m
[92m âœ“ It should Create a new Wishlist[0m
[92m âœ“ It should not Create a Pet with no content type[0m
[92m âœ“ It should return a 400 error for invalid data[0m
[91m âœ— It should Delete an Items[0m
[92m âœ“ It should Delete a Wishlist[0m
[91m âœ— It should get/read all items in a wishlist**[0m
[92m âœ“ It should Get a list of all Wishlists*[0m
[91m âœ— It should not Get a item thats not found[0m
[91m âœ— It should Get a single item[0m
[92m âœ“ It should Read a single wishlist[0m
[92m âœ“ It should not Read an wishlist that is not found[0m
[92m âœ“ It should get the health endpoint[0m
[92m âœ“ It should call the home page[0m
[91m âœ— It should mark an item as favorite[0m
[92m âœ“ It should mark an wishlist as favorite[0m
[91m âœ— It should Query Items by favorite[0m
[91m âœ— It should Query Items by Category within a Wishlist[0m
[91m âœ— It should Query Items by Name within a Wishlist[0m
[91m âœ— It should Query Items by Price within a Wishlist[0m
[92m âœ“ It should Query Wishlist by favorite[0m
[92m âœ“ It should not Accept any requests with unsupported methods[0m
[92m âœ“ It should not Create when sending unsupported media type[0m
[92m âœ“ It should Update an existing Wishlist[0m
[91m âœ— It should Update a wishlist item in a wishlist[0m
[91m âœ— It should not Update a wishlist item that does not exist[0m
[92m âœ“ It should not Update a Wishlist that does not exist[0m
                                                                         [  0%]
tests/test_wishlist.py                                                                                 
Cases for Wishlist Model
[92m âœ“ It should create a Wishlist[0m
[92m âœ“ It should not create an Wishlist on database error[0m
[92m âœ“ It should fail to create a Wishlist with a null name and raise DataValidationError[0m
[92m âœ“ It should Delete a Wishlist[0m
[92m âœ“ It should not delete an Wishlist on database error[0m
[92m âœ“ It should correctly deserialize a Wishlist with valid items[0m
[92m âœ“ It should not Deserialize a wishlist with a KeyError[0m
[92m âœ“ It should not Deserialize a wishlist with a TypeError[0m
[92m âœ“ It should Find Wishlists by Favorite[0m
[92m âœ“ It should Find an Wishlist by name[0m
[92m âœ“ It should Update a Wishlist[0m
[92m âœ“ It should not Update a Wishlist with no id[0m
[92m âœ“ It should not update a Wishlist on database error[0m


=================================== FAILURES ===================================
________________________ TestWishlist.test_delete_items ________________________

self = <tests.test_items.TestWishlist testMethod=test_delete_items>

    def test_delete_items(self):
        """It should Delete an item from a Wishlist"""
        wishlist = WishlistFactory()
        item = ItemsFactory(wishlist=wishlist)
        wishlist.items.append(item)
        wishlist.create()
    
        # Confirmation that the item exists in the wish list
        self.assertIsNotNone(wishlist.id)
        self.assertEqual(len(wishlist.items), 1)
        self.assertEqual(wishlist.items[0].id, item.id)
    
        # Delete items and update the wishlist
        item.delete()
        wishlist.update()
    
        # Retrieve the wish list from the database and confirm that the item has been deleted
        updated_wishlist = Wishlist.find(wishlist.id)
        self.assertEqual(len(updated_wishlist.items), 0)
>       self.assertIsNone(Items.find(item.id))

tests/test_items.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'service.models.items.Items'>, by_id = 2

    @classmethod
    def find(cls, by_id):
        """Finds a record by it's ID"""
        logger.info("Processing lookup for id %s ...", by_id)
        # pylint: disable=no-member
>       return cls.query.session.get(cls, by_id)
E       AttributeError: 'function' object has no attribute 'session'

service/models/persistent_base.py:104: AttributeError
______________________ TestWishlist.test_find_by_category ______________________

self = <tests.test_items.TestWishlist testMethod=test_find_by_category>

    def test_find_by_category(self):
        """It should find Items by Category"""
        wishlist = WishlistFactory()
        item1 = ItemsFactory(category="food", wishlist=wishlist)
        item2 = ItemsFactory(category="electronics", wishlist=wishlist)
        wishlist.items.append(item1)
        wishlist.items.append(item2)
        wishlist.create()
    
>       items = Items.find_by_category(wishlist_id=wishlist.id, category="food")

tests/test_items.py:200: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'service.models.items.Items'>, wishlist_id = 2, category = 'food'

    @classmethod
    def find_by_category(cls, wishlist_id, category):
        """Returns all Wishlists with the given name
    
        Args:
            category (string): the category of the Wishlists item you want to match
        """
        logger.info(
            "Processing query for wishlist_id=%s and price=%s ...",
            wishlist_id,
            category,
        )
>       return cls.query.filter(
            cls.wishlist_id == wishlist_id, cls.category == category
        ).all()
E       AttributeError: 'function' object has no attribute 'filter'

service/models/items.py:114: AttributeError
______________________ TestWishlist.test_find_by_favorite ______________________

self = <tests.test_items.TestWishlist testMethod=test_find_by_favorite>

    def test_find_by_favorite(self):
        """It should Find Items by is_favorite"""
    
        # Ensure no wishlists exist initially
        wishlists = Wishlist.all()
        self.assertEqual(wishlists, [])
    
        # Create a new wishlist and add it to the database
        wishlist = WishlistFactory()
        wishlist.create()
    
        # Assert that the wishlist has been created and has an ID
        self.assertIsNotNone(wishlist.id)
    
        # Create 10 items associated with the created wishlist
        items = ItemsFactory.create_batch(10, wishlist=wishlist)
        for item in items:
            db.session.add(item)
    
        db.session.add(wishlist)
        db.session.commit()
        # Check that we have 10 items in the database for the wishlist
>       self.assertEqual(len(Items.all()), 10)

tests/test_items.py:237: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'service.models.items.Items'>

    @classmethod
    def all(cls):
        """Returns all of the records in the database"""
        logger.info("Processing all records")
        # pylint: disable=no-member
>       return cls.query.all()
E       AttributeError: 'function' object has no attribute 'all'

service/models/persistent_base.py:97: AttributeError
_______________________ TestWishlist.test_find_by_price ________________________

self = <tests.test_items.TestWishlist testMethod=test_find_by_price>

    def test_find_by_price(self):
        """It should find Items by Price"""
        wishlist = WishlistFactory()
        item1 = ItemsFactory(price=20.5, wishlist=wishlist)
        item2 = ItemsFactory(price=50.0, wishlist=wishlist)
        wishlist.items.append(item1)
        wishlist.items.append(item2)
        wishlist.create()
    
>       items = Items.find_by_price(wishlist_id=wishlist.id, price=20.5)

tests/test_items.py:186: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'service.models.items.Items'>, wishlist_id = 4, price = 20.5

    @classmethod
    def find_by_price(cls, wishlist_id, price):
        """Returns all Wishlists with the given name
    
        Args:
            price (float): the price  of the Wishlists item you want to match
        """
        logger.info(
            "Processing query for wishlist_id=%s and price=%s ...", wishlist_id, price
        )
>       return cls.query.filter(
            cls.wishlist_id == wishlist_id, cls.price == price
        ).all()
E       AttributeError: 'function' object has no attribute 'filter'

service/models/items.py:98: AttributeError
_________________________ TestWishlist.test_read_items _________________________

self = <tests.test_items.TestWishlist testMethod=test_read_items>

    def test_read_items(self):
        """It should Read a Item"""
        item = ItemsFactory()
        logging.debug(item)
        item.id = None
        item.create()
        self.assertIsNotNone(item.id)
        # Fetch it back
>       found_item = item.find(item.id)

tests/test_items.py:170: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'service.models.items.Items'>, by_id = 45

    @classmethod
    def find(cls, by_id):
        """Finds a record by it's ID"""
        logger.info("Processing lookup for id %s ...", by_id)
        # pylint: disable=no-member
>       return cls.query.session.get(cls, by_id)
E       AttributeError: 'function' object has no attribute 'session'

service/models/persistent_base.py:104: AttributeError
_______________ TestWishlistService.test_cancel_item_as_favorite _______________

self = <tests.test_routes.TestWishlistService testMethod=test_cancel_item_as_favorite>

    def test_cancel_item_as_favorite(self):
        """It should cancel an item as favorite"""
        wishlist = self._create_wishlists(1)[0]
        item = self._create_items(wishlist.id, 1)[0]
    
>       self.client.put(f"{BASE_URL}/{wishlist.id}/items/{item.id}/favorite")

tests/test_routes.py:617: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:1172: in put
    return self.open(*args, **kw)
/usr/local/lib/python3.11/site-packages/flask/testing.py:234: in open
    response = super().open(
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:1116: in open
    response_parts = self.run_wsgi_app(request.environ, buffered=buffered)
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:988: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:1264: in run_wsgi_app
    app_rv = app(environ, start_response)
/usr/local/lib/python3.11/site-packages/flask/app.py:1536: in __call__
    return self.wsgi_app(environ, start_response)
/usr/local/lib/python3.11/site-packages/flask/app.py:1514: in wsgi_app
    response = self.handle_exception(e)
/usr/local/lib/python3.11/site-packages/flask/app.py:1511: in wsgi_app
    response = self.full_dispatch_request()
/usr/local/lib/python3.11/site-packages/flask/app.py:919: in full_dispatch_request
    rv = self.handle_user_exception(e)
/usr/local/lib/python3.11/site-packages/flask/app.py:917: in full_dispatch_request
    rv = self.dispatch_request()
/usr/local/lib/python3.11/site-packages/flask/app.py:902: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
service/routes.py:404: in mark_item_favorite
    item = Items.find(item_id)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'service.models.items.Items'>, by_id = 46

    @classmethod
    def find(cls, by_id):
        """Finds a record by it's ID"""
        logger.info("Processing lookup for id %s ...", by_id)
        # pylint: disable=no-member
>       return cls.query.session.get(cls, by_id)
E       AttributeError: 'function' object has no attribute 'session'

service/models/persistent_base.py:104: AttributeError
____________________ TestWishlistService.test_create_items _____________________

self = <tests.test_routes.TestWishlistService testMethod=test_create_items>

    def test_create_items(self):
        """It should Add an item to an wishlist"""
        wishlist = self._create_wishlists(1)[0]
        item = ItemsFactory()
        resp = self.client.post(
            f"{BASE_URL}/{wishlist.id}/items",
            json=item.serialize(),
            content_type="application/json",
        )
        self.assertEqual(resp.status_code, status.HTTP_201_CREATED)
    
        # Make sure location header is set
        location = resp.headers.get("Location", None)
        self.assertIsNotNone(location)
    
        data = resp.get_json()
        logging.debug(data)
    
        # The database assign data id automatically, since it is a primary key,
        # so the item response does not match
        item.id = data["id"]
    
        self.assertEqual(data["name"], item.name)
        self.assertEqual(data["id"], item.id)
        self.assertEqual(data["wishlist_id"], wishlist.id)
        self.assertEqual(data["quantity"], item.quantity)
        self.assertEqual(data["category"], item.category)  # category
        self.assertEqual(data["price"], item.price)
        self.assertEqual(data["note"], item.note)
    
        # Check that the location header was correct by getting it
>       resp = self.client.get(location, content_type="application/json")

tests/test_routes.py:197: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:1162: in get
    return self.open(*args, **kw)
/usr/local/lib/python3.11/site-packages/flask/testing.py:234: in open
    response = super().open(
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:1116: in open
    response_parts = self.run_wsgi_app(request.environ, buffered=buffered)
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:988: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:1264: in run_wsgi_app
    app_rv = app(environ, start_response)
/usr/local/lib/python3.11/site-packages/flask/app.py:1536: in __call__
    return self.wsgi_app(environ, start_response)
/usr/local/lib/python3.11/site-packages/flask/app.py:1514: in wsgi_app
    response = self.handle_exception(e)
/usr/local/lib/python3.11/site-packages/flask/app.py:1511: in wsgi_app
    response = self.full_dispatch_request()
/usr/local/lib/python3.11/site-packages/flask/app.py:919: in full_dispatch_request
    rv = self.handle_user_exception(e)
/usr/local/lib/python3.11/site-packages/flask/app.py:917: in full_dispatch_request
    rv = self.dispatch_request()
/usr/local/lib/python3.11/site-packages/flask/app.py:902: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
service/routes.py:251: in get_items
    item = Items.find(item_id)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'service.models.items.Items'>, by_id = 47

    @classmethod
    def find(cls, by_id):
        """Finds a record by it's ID"""
        logger.info("Processing lookup for id %s ...", by_id)
        # pylint: disable=no-member
>       return cls.query.session.get(cls, by_id)
E       AttributeError: 'function' object has no attribute 'session'

service/models/persistent_base.py:104: AttributeError
____________________ TestWishlistService.test_delete_items _____________________

self = <tests.test_routes.TestWishlistService testMethod=test_delete_items>

    def test_delete_items(self):
        """It should Delete an Items"""
        wishlist = self._create_wishlists(1)[0]
        item = ItemsFactory()
        response = self.client.post(
            f"{BASE_URL}/{wishlist.id}/items",
            json=item.serialize(),
            content_type="application/json",
        )
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
    
        item_id = response.get_json()["id"]
    
        # delete the item and confirm the deletion
>       delete_resp = self.client.delete(f"{BASE_URL}/{wishlist.id}/items/{item_id}")

tests/test_routes.py:229: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:1177: in delete
    return self.open(*args, **kw)
/usr/local/lib/python3.11/site-packages/flask/testing.py:234: in open
    response = super().open(
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:1116: in open
    response_parts = self.run_wsgi_app(request.environ, buffered=buffered)
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:988: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:1264: in run_wsgi_app
    app_rv = app(environ, start_response)
/usr/local/lib/python3.11/site-packages/flask/app.py:1536: in __call__
    return self.wsgi_app(environ, start_response)
/usr/local/lib/python3.11/site-packages/flask/app.py:1514: in wsgi_app
    response = self.handle_exception(e)
/usr/local/lib/python3.11/site-packages/flask/app.py:1511: in wsgi_app
    response = self.full_dispatch_request()
/usr/local/lib/python3.11/site-packages/flask/app.py:919: in full_dispatch_request
    rv = self.handle_user_exception(e)
/usr/local/lib/python3.11/site-packages/flask/app.py:917: in full_dispatch_request
    rv = self.dispatch_request()
/usr/local/lib/python3.11/site-packages/flask/app.py:902: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
service/routes.py:271: in delete_items
    item = Items.find(item_id)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'service.models.items.Items'>, by_id = 48

    @classmethod
    def find(cls, by_id):
        """Finds a record by it's ID"""
        logger.info("Processing lookup for id %s ...", by_id)
        # pylint: disable=no-member
>       return cls.query.session.get(cls, by_id)
E       AttributeError: 'function' object has no attribute 'session'

service/models/persistent_base.py:104: AttributeError
______________ TestWishlistService.test_get_all_items_in_wishlist ______________

self = <tests.test_routes.TestWishlistService testMethod=test_get_all_items_in_wishlist>

    def test_get_all_items_in_wishlist(self):
        """It should get/read all items in a wishlist**"""
    
        wishlist = self._create_wishlists(1)[0]
        resp = self.client.get(
            f"{BASE_URL}/{wishlist.id}", content_type="application/json"
        )
        self.assertEqual(resp.status_code, status.HTTP_200_OK)
    
        data = resp.get_json()
        self.assertEqual(data["name"], wishlist.name)
        wishlist.id = data["id"]
    
        item = ItemsFactory()
        resp = self.client.post(
            f"{BASE_URL}/{wishlist.id}/items",
            json=item.serialize(),
            content_type="application/json",
        )
        self.assertEqual(resp.status_code, status.HTTP_201_CREATED)
    
>       resp = self.client.get(
            f"{BASE_URL}/{wishlist.id}/items",  # Correct endpoint for fetching items
            content_type="application/json",
        )

tests/test_routes.py:435: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:1162: in get
    return self.open(*args, **kw)
/usr/local/lib/python3.11/site-packages/flask/testing.py:234: in open
    response = super().open(
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:1116: in open
    response_parts = self.run_wsgi_app(request.environ, buffered=buffered)
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:988: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:1264: in run_wsgi_app
    app_rv = app(environ, start_response)
/usr/local/lib/python3.11/site-packages/flask/app.py:1536: in __call__
    return self.wsgi_app(environ, start_response)
/usr/local/lib/python3.11/site-packages/flask/app.py:1514: in wsgi_app
    response = self.handle_exception(e)
/usr/local/lib/python3.11/site-packages/flask/app.py:1511: in wsgi_app
    response = self.full_dispatch_request()
/usr/local/lib/python3.11/site-packages/flask/app.py:919: in full_dispatch_request
    rv = self.handle_user_exception(e)
/usr/local/lib/python3.11/site-packages/flask/app.py:917: in full_dispatch_request
    rv = self.dispatch_request()
/usr/local/lib/python3.11/site-packages/flask/app.py:902: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
service/routes.py:382: in get_all_items
    items = Items.all()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'service.models.items.Items'>

    @classmethod
    def all(cls):
        """Returns all of the records in the database"""
        logger.info("Processing all records")
        # pylint: disable=no-member
>       return cls.query.all()
E       AttributeError: 'function' object has no attribute 'all'

service/models/persistent_base.py:97: AttributeError
_________________ TestWishlistService.test_get_item_not_found __________________

self = <tests.test_routes.TestWishlistService testMethod=test_get_item_not_found>

    def test_get_item_not_found(self):
        """It should not Get a item thats not found"""
        wishlist = self._create_wishlists(1)[0]
>       response = self.client.get(f"{BASE_URL}/{wishlist.id}/items/0")

tests/test_routes.py:248: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:1162: in get
    return self.open(*args, **kw)
/usr/local/lib/python3.11/site-packages/flask/testing.py:234: in open
    response = super().open(
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:1116: in open
    response_parts = self.run_wsgi_app(request.environ, buffered=buffered)
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:988: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:1264: in run_wsgi_app
    app_rv = app(environ, start_response)
/usr/local/lib/python3.11/site-packages/flask/app.py:1536: in __call__
    return self.wsgi_app(environ, start_response)
/usr/local/lib/python3.11/site-packages/flask/app.py:1514: in wsgi_app
    response = self.handle_exception(e)
/usr/local/lib/python3.11/site-packages/flask/app.py:1511: in wsgi_app
    response = self.full_dispatch_request()
/usr/local/lib/python3.11/site-packages/flask/app.py:919: in full_dispatch_request
    rv = self.handle_user_exception(e)
/usr/local/lib/python3.11/site-packages/flask/app.py:917: in full_dispatch_request
    rv = self.dispatch_request()
/usr/local/lib/python3.11/site-packages/flask/app.py:902: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
service/routes.py:251: in get_items
    item = Items.find(item_id)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'service.models.items.Items'>, by_id = 0

    @classmethod
    def find(cls, by_id):
        """Finds a record by it's ID"""
        logger.info("Processing lookup for id %s ...", by_id)
        # pylint: disable=no-member
>       return cls.query.session.get(cls, by_id)
E       AttributeError: 'function' object has no attribute 'session'

service/models/persistent_base.py:104: AttributeError
______________________ TestWishlistService.test_get_items ______________________

self = <tests.test_routes.TestWishlistService testMethod=test_get_items>

    def test_get_items(self):
        """It should Get a single item"""
        # get the id of a item
        wishlist = self._create_wishlists(1)[0]
        test_item = self._create_items(wishlist.id, 1)[0]
>       response = self.client.get(f"{BASE_URL}/{wishlist.id}/items/{test_item.id}")

tests/test_routes.py:240: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:1162: in get
    return self.open(*args, **kw)
/usr/local/lib/python3.11/site-packages/flask/testing.py:234: in open
    response = super().open(
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:1116: in open
    response_parts = self.run_wsgi_app(request.environ, buffered=buffered)
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:988: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:1264: in run_wsgi_app
    app_rv = app(environ, start_response)
/usr/local/lib/python3.11/site-packages/flask/app.py:1536: in __call__
    return self.wsgi_app(environ, start_response)
/usr/local/lib/python3.11/site-packages/flask/app.py:1514: in wsgi_app
    response = self.handle_exception(e)
/usr/local/lib/python3.11/site-packages/flask/app.py:1511: in wsgi_app
    response = self.full_dispatch_request()
/usr/local/lib/python3.11/site-packages/flask/app.py:919: in full_dispatch_request
    rv = self.handle_user_exception(e)
/usr/local/lib/python3.11/site-packages/flask/app.py:917: in full_dispatch_request
    rv = self.dispatch_request()
/usr/local/lib/python3.11/site-packages/flask/app.py:902: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
service/routes.py:251: in get_items
    item = Items.find(item_id)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'service.models.items.Items'>, by_id = 50

    @classmethod
    def find(cls, by_id):
        """Finds a record by it's ID"""
        logger.info("Processing lookup for id %s ...", by_id)
        # pylint: disable=no-member
>       return cls.query.session.get(cls, by_id)
E       AttributeError: 'function' object has no attribute 'session'

service/models/persistent_base.py:104: AttributeError
________________ TestWishlistService.test_mark_item_as_favorite ________________

self = <tests.test_routes.TestWishlistService testMethod=test_mark_item_as_favorite>

    def test_mark_item_as_favorite(self):
        """It should mark an item as favorite"""
        wishlist = self._create_wishlists(1)[0]
        item = self._create_items(wishlist.id, 1)[0]
    
        # Mark the item as favorite
>       response = self.client.put(f"{BASE_URL}/{wishlist.id}/items/{item.id}/favorite")

tests/test_routes.py:593: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:1172: in put
    return self.open(*args, **kw)
/usr/local/lib/python3.11/site-packages/flask/testing.py:234: in open
    response = super().open(
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:1116: in open
    response_parts = self.run_wsgi_app(request.environ, buffered=buffered)
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:988: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:1264: in run_wsgi_app
    app_rv = app(environ, start_response)
/usr/local/lib/python3.11/site-packages/flask/app.py:1536: in __call__
    return self.wsgi_app(environ, start_response)
/usr/local/lib/python3.11/site-packages/flask/app.py:1514: in wsgi_app
    response = self.handle_exception(e)
/usr/local/lib/python3.11/site-packages/flask/app.py:1511: in wsgi_app
    response = self.full_dispatch_request()
/usr/local/lib/python3.11/site-packages/flask/app.py:919: in full_dispatch_request
    rv = self.handle_user_exception(e)
/usr/local/lib/python3.11/site-packages/flask/app.py:917: in full_dispatch_request
    rv = self.dispatch_request()
/usr/local/lib/python3.11/site-packages/flask/app.py:902: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
service/routes.py:404: in mark_item_favorite
    item = Items.find(item_id)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'service.models.items.Items'>, by_id = 51

    @classmethod
    def find(cls, by_id):
        """Finds a record by it's ID"""
        logger.info("Processing lookup for id %s ...", by_id)
        # pylint: disable=no-member
>       return cls.query.session.get(cls, by_id)
E       AttributeError: 'function' object has no attribute 'session'

service/models/persistent_base.py:104: AttributeError
_______________ TestWishlistService.test_query_item_by_favorite ________________

self = <tests.test_routes.TestWishlistService testMethod=test_query_item_by_favorite>

    def test_query_item_by_favorite(self):
        """It should Query Items by favorite"""
        wishlist = self._create_wishlists(1)[0]
        items = self._create_items(wishlist.id, 10)
        favorite_item = [item for item in items if item.is_favorite is True]
        unfavorite_item = [item for item in items if item.is_favorite is False]
        is_favorite_count = len(favorite_item)
        unis_favorite_count = len(unfavorite_item)
        logging.debug("Available Items [%d] %s", is_favorite_count, favorite_item)
        logging.debug(
            "Unis_favorite Items [%d] %s", unis_favorite_count, unfavorite_item
        )
    
        # test for is_favorite
>       response = self.client.get(
            f"{BASE_URL}/{wishlist.id}/items", query_string="is_favorite=true"
        )

tests/test_routes.py:737: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:1162: in get
    return self.open(*args, **kw)
/usr/local/lib/python3.11/site-packages/flask/testing.py:234: in open
    response = super().open(
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:1116: in open
    response_parts = self.run_wsgi_app(request.environ, buffered=buffered)
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:988: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:1264: in run_wsgi_app
    app_rv = app(environ, start_response)
/usr/local/lib/python3.11/site-packages/flask/app.py:1536: in __call__
    return self.wsgi_app(environ, start_response)
/usr/local/lib/python3.11/site-packages/flask/app.py:1514: in wsgi_app
    response = self.handle_exception(e)
/usr/local/lib/python3.11/site-packages/flask/app.py:1511: in wsgi_app
    response = self.full_dispatch_request()
/usr/local/lib/python3.11/site-packages/flask/app.py:919: in full_dispatch_request
    rv = self.handle_user_exception(e)
/usr/local/lib/python3.11/site-packages/flask/app.py:917: in full_dispatch_request
    rv = self.dispatch_request()
/usr/local/lib/python3.11/site-packages/flask/app.py:902: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
service/routes.py:379: in get_all_items
    items = Items.find_by_favorite(wishlist_id, is_favorite_value)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'service.models.items.Items'>, wishlist_id = 93, is_favorite = True

    @classmethod
    def find_by_favorite(cls, wishlist_id, is_favorite: bool = True) -> list:
        """Returns all Items by their is_favorite
    
        :param is_favorite: True for items that are favorite
        :type favorite: str
    
        :return: a collection of Items that are favorite
        :rtype: list
    
        """
        if not isinstance(is_favorite, bool):
            raise TypeError("Invalid availability, must be of type boolean")
        logger.info("Processing favorite query for %s ...", is_favorite)
>       return cls.query.filter(
            cls.wishlist_id == wishlist_id, cls.is_favorite == is_favorite
        )
E       AttributeError: 'function' object has no attribute 'filter'

service/models/items.py:132: AttributeError
_______________ TestWishlistService.test_query_items_by_category _______________

self = <tests.test_routes.TestWishlistService testMethod=test_query_items_by_category>

    def test_query_items_by_category(self):
        """It should Query Items by Category within a Wishlist"""
        wishlist = self._create_wishlists(1)[0]
        resp = self.client.get(
            f"{BASE_URL}/{wishlist.id}", content_type="application/json"
        )
        self.assertEqual(resp.status_code, status.HTTP_200_OK)
    
        data = resp.get_json()
        self.assertEqual(data["name"], wishlist.name)
        wishlist.id = data["id"]
    
        item = ItemsFactory(category="food")
        resp = self.client.post(
            f"{BASE_URL}/{wishlist.id}/items",
            json=item.serialize(),
            content_type="application/json",
        )
        self.assertEqual(resp.status_code, status.HTTP_201_CREATED)
    
        test_category = "food"
>       response = self.client.get(
            f"{BASE_URL}/{wishlist.id}/items?category={test_category}",
            content_type="application/json",
        )

tests/test_routes.py:497: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:1162: in get
    return self.open(*args, **kw)
/usr/local/lib/python3.11/site-packages/flask/testing.py:234: in open
    response = super().open(
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:1116: in open
    response_parts = self.run_wsgi_app(request.environ, buffered=buffered)
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:988: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:1264: in run_wsgi_app
    app_rv = app(environ, start_response)
/usr/local/lib/python3.11/site-packages/flask/app.py:1536: in __call__
    return self.wsgi_app(environ, start_response)
/usr/local/lib/python3.11/site-packages/flask/app.py:1514: in wsgi_app
    response = self.handle_exception(e)
/usr/local/lib/python3.11/site-packages/flask/app.py:1511: in wsgi_app
    response = self.full_dispatch_request()
/usr/local/lib/python3.11/site-packages/flask/app.py:919: in full_dispatch_request
    rv = self.handle_user_exception(e)
/usr/local/lib/python3.11/site-packages/flask/app.py:917: in full_dispatch_request
    rv = self.dispatch_request()
/usr/local/lib/python3.11/site-packages/flask/app.py:902: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
service/routes.py:371: in get_all_items
    items = Items.find_by_category(wishlist_id=wishlist_id, category=category)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'service.models.items.Items'>, wishlist_id = 94, category = 'food'

    @classmethod
    def find_by_category(cls, wishlist_id, category):
        """Returns all Wishlists with the given name
    
        Args:
            category (string): the category of the Wishlists item you want to match
        """
        logger.info(
            "Processing query for wishlist_id=%s and price=%s ...",
            wishlist_id,
            category,
        )
>       return cls.query.filter(
            cls.wishlist_id == wishlist_id, cls.category == category
        ).all()
E       AttributeError: 'function' object has no attribute 'filter'

service/models/items.py:114: AttributeError
_________________ TestWishlistService.test_query_items_by_name _________________

self = <tests.test_routes.TestWishlistService testMethod=test_query_items_by_name>

    def test_query_items_by_name(self):
        """It should Query Items by Name within a Wishlist"""
        # Create a Wishlist
        wishlist = self._create_wishlists(1)[0]
        resp = self.client.get(
            f"{BASE_URL}/{wishlist.id}", content_type="application/json"
        )
        self.assertEqual(resp.status_code, status.HTTP_200_OK)
    
        data = resp.get_json()
        self.assertEqual(data["name"], wishlist.name)
        wishlist.id = data["id"]
    
        # Add an Item to the Wishlist
        item_name = "Sunglasses"
        item = ItemsFactory(name=item_name)
        resp = self.client.post(
            f"{BASE_URL}/{wishlist.id}/items",
            json=item.serialize(),
            content_type="application/json",
        )
        self.assertEqual(resp.status_code, status.HTTP_201_CREATED)
    
        # Query the Item by Name
>       response = self.client.get(
            f"{BASE_URL}/{wishlist.id}/items?name={item_name}",
            content_type="application/json",
        )

tests/test_routes.py:562: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:1162: in get
    return self.open(*args, **kw)
/usr/local/lib/python3.11/site-packages/flask/testing.py:234: in open
    response = super().open(
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:1116: in open
    response_parts = self.run_wsgi_app(request.environ, buffered=buffered)
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:988: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:1264: in run_wsgi_app
    app_rv = app(environ, start_response)
/usr/local/lib/python3.11/site-packages/flask/app.py:1536: in __call__
    return self.wsgi_app(environ, start_response)
/usr/local/lib/python3.11/site-packages/flask/app.py:1514: in wsgi_app
    response = self.handle_exception(e)
/usr/local/lib/python3.11/site-packages/flask/app.py:1511: in wsgi_app
    response = self.full_dispatch_request()
/usr/local/lib/python3.11/site-packages/flask/app.py:919: in full_dispatch_request
    rv = self.handle_user_exception(e)
/usr/local/lib/python3.11/site-packages/flask/app.py:917: in full_dispatch_request
    rv = self.dispatch_request()
/usr/local/lib/python3.11/site-packages/flask/app.py:902: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
service/routes.py:382: in get_all_items
    items = Items.all()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'service.models.items.Items'>

    @classmethod
    def all(cls):
        """Returns all of the records in the database"""
        logger.info("Processing all records")
        # pylint: disable=no-member
>       return cls.query.all()
E       AttributeError: 'function' object has no attribute 'all'

service/models/persistent_base.py:97: AttributeError
________________ TestWishlistService.test_query_items_by_price _________________

self = <tests.test_routes.TestWishlistService testMethod=test_query_items_by_price>

    def test_query_items_by_price(self):
        """It should Query Items by Price within a Wishlist"""
        wishlist = self._create_wishlists(1)[0]
        resp = self.client.get(
            f"{BASE_URL}/{wishlist.id}", content_type="application/json"
        )
        self.assertEqual(resp.status_code, status.HTTP_200_OK)
    
        data = resp.get_json()
        self.assertEqual(data["name"], wishlist.name)
        wishlist.id = data["id"]
    
        item = ItemsFactory(price=20.5)
        resp = self.client.post(
            f"{BASE_URL}/{wishlist.id}/items",
            json=item.serialize(),
            content_type="application/json",
        )
        self.assertEqual(resp.status_code, status.HTTP_201_CREATED)
    
        test_price = 20.5
>       response = self.client.get(
            f"{BASE_URL}/{wishlist.id}/items?price={test_price}",
            content_type="application/json",
        )

tests/test_routes.py:528: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:1162: in get
    return self.open(*args, **kw)
/usr/local/lib/python3.11/site-packages/flask/testing.py:234: in open
    response = super().open(
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:1116: in open
    response_parts = self.run_wsgi_app(request.environ, buffered=buffered)
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:988: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:1264: in run_wsgi_app
    app_rv = app(environ, start_response)
/usr/local/lib/python3.11/site-packages/flask/app.py:1536: in __call__
    return self.wsgi_app(environ, start_response)
/usr/local/lib/python3.11/site-packages/flask/app.py:1514: in wsgi_app
    response = self.handle_exception(e)
/usr/local/lib/python3.11/site-packages/flask/app.py:1511: in wsgi_app
    response = self.full_dispatch_request()
/usr/local/lib/python3.11/site-packages/flask/app.py:919: in full_dispatch_request
    rv = self.handle_user_exception(e)
/usr/local/lib/python3.11/site-packages/flask/app.py:917: in full_dispatch_request
    rv = self.dispatch_request()
/usr/local/lib/python3.11/site-packages/flask/app.py:902: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
service/routes.py:374: in get_all_items
    items = Items.find_by_price(wishlist_id=wishlist_id, price=price)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'service.models.items.Items'>, wishlist_id = 96, price = 20.5

    @classmethod
    def find_by_price(cls, wishlist_id, price):
        """Returns all Wishlists with the given name
    
        Args:
            price (float): the price  of the Wishlists item you want to match
        """
        logger.info(
            "Processing query for wishlist_id=%s and price=%s ...", wishlist_id, price
        )
>       return cls.query.filter(
            cls.wishlist_id == wishlist_id, cls.price == price
        ).all()
E       AttributeError: 'function' object has no attribute 'filter'

service/models/items.py:98: AttributeError
________________ TestWishlistService.test_update_wishlist_item _________________

self = <tests.test_routes.TestWishlistService testMethod=test_update_wishlist_item>

    def test_update_wishlist_item(self):
        """It should Update a wishlist item in a wishlist"""
        # create a known wishlist and wishlist item
        wishlist = self._create_wishlists(1)[0]
        item = ItemsFactory()
        resp = self.client.post(
            f"{BASE_URL}/{wishlist.id}/items",
            json=item.serialize(),
            content_type="application/json",
        )
        self.assertEqual(resp.status_code, status.HTTP_201_CREATED)
    
        data = resp.get_json()
        logging.debug(data)
        item_id = data["id"]
        data["note"] = "Updated"
    
>       resp = self.client.put(
            f"{BASE_URL}/{wishlist.id}/items/{item_id}",
            json=data,
            content_type="application/json",
        )

tests/test_routes.py:351: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:1172: in put
    return self.open(*args, **kw)
/usr/local/lib/python3.11/site-packages/flask/testing.py:234: in open
    response = super().open(
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:1116: in open
    response_parts = self.run_wsgi_app(request.environ, buffered=buffered)
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:988: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:1264: in run_wsgi_app
    app_rv = app(environ, start_response)
/usr/local/lib/python3.11/site-packages/flask/app.py:1536: in __call__
    return self.wsgi_app(environ, start_response)
/usr/local/lib/python3.11/site-packages/flask/app.py:1514: in wsgi_app
    response = self.handle_exception(e)
/usr/local/lib/python3.11/site-packages/flask/app.py:1511: in wsgi_app
    response = self.full_dispatch_request()
/usr/local/lib/python3.11/site-packages/flask/app.py:919: in full_dispatch_request
    rv = self.handle_user_exception(e)
/usr/local/lib/python3.11/site-packages/flask/app.py:917: in full_dispatch_request
    rv = self.dispatch_request()
/usr/local/lib/python3.11/site-packages/flask/app.py:902: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
service/routes.py:294: in update_item
    item = Items.find(item_id)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'service.models.items.Items'>, by_id = 65

    @classmethod
    def find(cls, by_id):
        """Finds a record by it's ID"""
        logger.info("Processing lookup for id %s ...", by_id)
        # pylint: disable=no-member
>       return cls.query.session.get(cls, by_id)
E       AttributeError: 'function' object has no attribute 'session'

service/models/persistent_base.py:104: AttributeError
___________ TestWishlistService.test_update_wishlist_item_not_exist ____________

self = <tests.test_routes.TestWishlistService testMethod=test_update_wishlist_item_not_exist>

    def test_update_wishlist_item_not_exist(self):
        """It should not Update a wishlist item that does not exist"""
        wishlist = self._create_wishlists(1)[0]
        item = ItemsFactory()
        resp = self.client.post(
            f"{BASE_URL}/{wishlist.id}/items",
            json=item.serialize(),
            content_type="application/json",
        )
        self.assertEqual(resp.status_code, status.HTTP_201_CREATED)
    
        data = resp.get_json()
        logging.debug(data)
        item_id = data["id"]
        # Update an item doesn't belongs to that wishlist
        new_item_id = item_id + 1
        data["note"] = "Updated"
>       resp = self.client.put(
            f"{BASE_URL}/{wishlist.id}/items/{new_item_id}",
            json=data,
            content_type="application/json",
        )

tests/test_routes.py:387: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:1172: in put
    return self.open(*args, **kw)
/usr/local/lib/python3.11/site-packages/flask/testing.py:234: in open
    response = super().open(
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:1116: in open
    response_parts = self.run_wsgi_app(request.environ, buffered=buffered)
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:988: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
/usr/local/lib/python3.11/site-packages/werkzeug/test.py:1264: in run_wsgi_app
    app_rv = app(environ, start_response)
/usr/local/lib/python3.11/site-packages/flask/app.py:1536: in __call__
    return self.wsgi_app(environ, start_response)
/usr/local/lib/python3.11/site-packages/flask/app.py:1514: in wsgi_app
    response = self.handle_exception(e)
/usr/local/lib/python3.11/site-packages/flask/app.py:1511: in wsgi_app
    response = self.full_dispatch_request()
/usr/local/lib/python3.11/site-packages/flask/app.py:919: in full_dispatch_request
    rv = self.handle_user_exception(e)
/usr/local/lib/python3.11/site-packages/flask/app.py:917: in full_dispatch_request
    rv = self.dispatch_request()
/usr/local/lib/python3.11/site-packages/flask/app.py:902: in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
service/routes.py:294: in update_item
    item = Items.find(item_id)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'service.models.items.Items'>, by_id = 67

    @classmethod
    def find(cls, by_id):
        """Finds a record by it's ID"""
        logger.info("Processing lookup for id %s ...", by_id)
        # pylint: disable=no-member
>       return cls.query.session.get(cls, by_id)
E       AttributeError: 'function' object has no attribute 'session'

service/models/persistent_base.py:104: AttributeError

---------- coverage: platform linux, python 3.11.10-final-0 ----------
Name                                Stmts   Miss  Cover   Missing
-----------------------------------------------------------------
service/__init__.py                    22      2    91%   51-52
service/common/cli_commands.py         14      0   100%
service/common/error_handlers.py       32      3    91%   91-93
service/common/log_handlers.py         10      1    90%   35
service/common/status.py               45      0   100%
service/config.py                       7      0   100%
service/models/__init__.py              3      0   100%
service/models/items.py                57     14    75%   130, 138-152
service/models/persistent_base.py      49      1    98%   41
service/models/wishlist.py             52      2    96%   54, 126
service/routes.py                     221     65    71%   77-79, 146, 252-258, 272-276, 292, 295-309, 353, 364, 384-386, 405-418, 431-452, 500, 519-532, 545-579
-----------------------------------------------------------------
TOTAL                                 512     88    83%

FAIL Required test coverage of 95% not reached. Total coverage: 82.81%
=========================== short test summary info ============================
FAILED tests/test_items.py::Items Model Test Cases::It should Delete an item from a Wishlist
FAILED tests/test_items.py::Items Model Test Cases::It should find Items by Category
FAILED tests/test_items.py::Items Model Test Cases::It should Find Items by is_favorite
FAILED tests/test_items.py::Items Model Test Cases::It should find Items by Price
FAILED tests/test_items.py::Items Model Test Cases::It should Read a Item - A...
FAILED tests/test_routes.py::REST API Server Tests::It should cancel an item as favorite
FAILED tests/test_routes.py::REST API Server Tests::It should Add an item to an wishlist
FAILED tests/test_routes.py::REST API Server Tests::It should Delete an Items
FAILED tests/test_routes.py::REST API Server Tests::It should get/read all items in a wishlist**
FAILED tests/test_routes.py::REST API Server Tests::It should not Get a item thats not found
FAILED tests/test_routes.py::REST API Server Tests::It should Get a single item
FAILED tests/test_routes.py::REST API Server Tests::It should mark an item as favorite
FAILED tests/test_routes.py::REST API Server Tests::It should Query Items by favorite
FAILED tests/test_routes.py::REST API Server Tests::It should Query Items by Category within a Wishlist
FAILED tests/test_routes.py::REST API Server Tests::It should Query Items by Name within a Wishlist
FAILED tests/test_routes.py::REST API Server Tests::It should Query Items by Price within a Wishlist
FAILED tests/test_routes.py::REST API Server Tests::It should Update a wishlist item in a wishlist
FAILED tests/test_routes.py::REST API Server Tests::It should not Update a wishlist item that does not exist
======================== 18 failed, 37 passed in 6.19s =========================
make: *** [Makefile:42: test] Error 1
